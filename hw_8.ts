//Task 1 
/* –í—ã–≤–µ–¥–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –≤ –∫–æ–Ω—Å–æ–ª—å —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ **`forEach`**
```javascript
    const fibonacci = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]
``` */

const fibonacci = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987];
fibonacci.forEach((value: number) => console.log(value))

//Task 2 
/* –ò—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ **`map`** —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Å—Å–∏–≤–∞ **`users`**, –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞:
> ['member 1: Darya', 'member 2: Masha', ... etc]
```javascript
    const users = ['Darya', 'Masha', 'Denis', 'Vitaliy', 'Polina', 'Anton']
``` */
const users: string[] = ['Darya', 'Masha', 'Denis', 'Vitaliy', 'Polina', 'Anton'];
const users2 = users.map((value: string, index: number) => console.log(`member ${index + 1}: ${value}`));

//Task 3 
/* –° –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ **`filter`** —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ –±—É–¥–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª.
```javascript
    const numbers = [7, -4, 32, -90, 54, 32, -21]
``` */

const numbers: number[] = [7, -4, 32, -90, 54, 32, -21];
const numbers2: number[] = numbers.filter((value: number) => {
  if (value > 0) {
    return true
  } else return false
})
console.log(numbers2);

// Task 4
/* –ò—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ **`reduce`** –ø–æ–ª—É—á–∏—Ç–µ —Å—É–º–º—É –≤—Å–µ—Ö —á–∏—Å–µ–ª –º–∞—Å—Å–∏–≤–∞.
```javascript
    const fibonacci = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]
``` */

const fibonaccii: number[] = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987];
console.log(fibonaccii.reduce((prevValue, curValue) => prevValue + curValue));

//Task 5 
/* –ò—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ **`find`** –Ω–∞–π–¥–∏—Ç–µ –≤ –º–∞—Å—Å–∏–≤–µ –ø–µ—Ä–≤–æ–µ —á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ.
```javascript
    const numbers = [5, 9, 13, 24, 54, 10, 13, 99, 1, 5]
``` */
const numbers1: number[] = [5, 9, 13, 24, 54, 10, 13, 99, 1, 5]
console.log(numbers1.find((value: number) => {
  if (value % 2 !== 0) {
    return true
  } else return false
}));

//Task 6
/* –ò—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ **`some`** –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ, –≤ –º–∞—Å—Å–∏–≤–µ –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∫—Ä–∞—Ç–Ω—ã–π 3 –∏ 5.
 –†–µ–∞–ª–∏–∑—É–π—Ç–µ –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞, –∫–æ–≥–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ true –∏–ª–∏ false*/

const numbers3: number[] = [3, 5, 7, 8, 9, 10];
console.log(numbers3.some((value) => { return value % 3 === 0 && value % 5 === 0 }));
console.log(numbers3.some((value) => { return !(value % 3 === 0 && value % 5 === 0) }));

//Task 7 
/*–ò—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ **`every`** –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ, –≤ –º–∞—Å—Å–∏–≤–µ —Å—É–º–º–∞ —Ü–∏—Ñ—Ä –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –∑–Ω–∞—á–µ–Ω–∏–π —á–µ—Ç–Ω–∞—è.
–†–µ–∞–ª–∏–∑—É–π—Ç–µ –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞, –∫–æ–≥–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ true –∏–ª–∏ false */

const numbers5: number[] = [2, 4, 8, 6];
console.log(numbers5.every((value) => {
  let q: number = value * value;
  let w: number[] = q.toString().split('').map(Number);
  const sum: any = w.reduce((prevValue, curValue) => prevValue + curValue);
  if (sum % 2 !== 0) {
    return true
  } else return false

}));

//Task 8 üñ•
/* –ò—Å–ø–æ–ª—å–∑—É—è –∫–æ–ª–ª–µ–∫—Ü–∏—é **`Map`** —Å–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∫ —Å–∞–ª–∞—Ç—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–∞–ª–∞—Ç.
–ù–∞–ø—Ä–∏–º–µ—Ä: –û–≥—É—Ä—Ü—ã - 300, –ø–æ–º–∏–¥–æ—Ä—ã - 200, —Å–æ–ª—å - 10, —Å–º–µ—Ç–∞–Ω–∞ - 110
–í—ã–≤–µ–¥–∏—Ç–µ –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ 100 –≥—Ä. */

const recipe = new Map<string, number>(
  [
    ['–û–≥—É—Ä—Ü—ã', 200],
    ['–ü–æ–º–∏–¥–æ—Ä—ã', 300],
    ['–ü–µ—Ç—Ä—É—à–∫–∞', 50],
    ['–£—Ä–æ–ø', 50],
    ['–°–º–µ—Ç–∞–Ω–∞', 150]
  ]
)

for (let [ingredient, amount] of recipe.entries()) {
  if (amount > 100) {
    console.log(ingredient, amount);
  };
};


// Task 9
/* –ò—Å–ø–æ–ª—å–∑—É—è –∫–æ–ª–ª–µ–∫—Ü–∏—é **`Set`** —Å–æ–∑–¥–∞–π—Ç–µ –º–∞—Å—Å–∏–≤ –Ω–µ–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Ö—Å—è –∑–Ω–∞—á–µ–Ω–∏–π:
```javascript
    const numbers = [1, 6, 3, 2, 7, 325, 234, 54, 586, 23, 24, 64, 56, 3, 5, 7, 8, 1, 6, 8, 9, 4, 5, 61, 2, 4, 5, 6, 3, 5]
``` */
const numbers4 = [1, 6, 3, 2, 7, 325, 234, 54, 586, 23, 24, 64, 56, 3, 5, 7, 8, 1, 6, 8, 9, 4, 5, 61, 2, 4, 5, 6, 3, 5];
const set1 = new Set(numbers4);
console.log(set1);

//Task 10
/* –î–∞–Ω –º–∞—Å—Å–∏–≤. –ó–∞–ø–∏—à–∏—Ç–µ –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç —ç—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é elem2, —Ç—Ä–µ—Ç–∏–π - –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é elem3. –ï—Å–ª–∏ –≤ –º–∞—Å—Å–∏–≤–µ –Ω–µ—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ - –∑–∞–ø–∏—à–∏—Ç–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é elem3 –∑–Ω–∞—á–µ–Ω–∏–µ 'eee', –∞ –µ—Å–ª–∏ –Ω–µ—Ç –≤—Ç–æ—Ä–æ–≥–æ - –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é elem2 –∑–∞–ø–∏—à–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ 'bbb'. –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∏–∫—É–¥–∞ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –Ω–µ –Ω–∞–¥–æ.  */

let arr1: string[] = ['first', 'second', 'third'];
let [elem1, elem2 = 'bbb', elem3 = 'eee'] = arr1;
console.log(elem2);
console.log(elem3);


//Task 11 
/* –î–∞–Ω –æ–±—ä–µ–∫—Ç {name: '–ü–µ—Ç—Ä', 'surname': '–ü–µ—Ç—Ä–æ–≤', 'age': '20 –ª–µ—Ç', }. –ó–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ name, surname –∏ age. –°–¥–µ–ª–∞–π—Ç–µ —Ç–∞–∫, —á—Ç–æ–±—ã, –µ—Å–ª–∏ –∫–∞–∫–æ–µ-—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –∑–∞–¥–∞–Ω–æ - –æ–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–ª–æ —Å–ª–µ–¥—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {name: '–ê–Ω–æ–Ω–æ–º', 'surname': '–ê–Ω–æ–Ω–∏–º–æ–≤–∏—á', 'age': '? –ª–µ—Ç'}.*/

const obj = { name1: '–ü–µ—Ç—Ä', surname: '–ü–µ—Ç—Ä–æ–≤', age: '20 –ª–µ—Ç' };
const { name1 = '–ê–Ω–æ–Ω–æ–º', surname = '–ê–Ω–æ–Ω–∏–º–æ–≤–∏—á', age = '? –ª–µ—Ç' } = obj;
console.log(name1, surname, age);


//ADVANCED level

//Task 1  –¢—Ä–æ–ª–ª–∏ –∞—Ç–∞–∫—É—é—Ç –Ω–∞—à —Ä–∞–∑–¥–µ–ª —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏!!!
/* + –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–µ–π - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –≥–ª–∞—Å–Ω—ã–µ –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Ç—Ä–æ–ª–ª–µ–π, –Ω–µ–π—Ç—Ä–∞–ª–∏–∑—É—è —É–≥—Ä–æ–∑—É.
+ –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º–∏ –≥–ª–∞—Å–Ω—ã–º–∏.
+ –ù–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç—Ä–æ–∫–∞ ¬´This website is for losers LOL!¬ª —Å—Ç–∞–Ω–µ—Ç "Ths wbst s fr lsrs LL!".
> –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ **`y`** –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –≥–ª–∞—Å–Ω–æ–π. */

function deleteWord(str: string) {

  const arr: string[] = ['a', 'e', 'i', 'o', 'u'];
  let str1: string[] = str.split('');
  let str2: string[] = str1.filter(letter => !arr.includes(letter));
  let str3: string = str2.join('');
  return str3
}

console.log(deleteWord('ryyyt fbjsjsod shdsohdogaa!'));

// Task 2 
/* + –í —ç—Ç–æ–º –Ω–µ–±–æ–ª—å—à–æ–º –∑–∞–¥–∞–Ω–∏–∏ –≤–∞–º –¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —á–∏—Å–µ–ª, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–∞–º–∏, –∏ –≤—ã –¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∏ –Ω–∞–∏–º–µ–Ω—å—à–µ–µ —á–∏—Å–ª–æ.
```javascript
    highAndLow("1 2 3 4 5"); // return "5 1"
    highAndLow("1 2 -3 4 5"); // return "5 -3"
    highAndLow("1 9 3 4 -5"); // return "9 -5"`
> –°—Ç—Ä–æ–∫–∞ –≤—ã–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –¥–≤—É—Ö —á–∏—Å–µ–ª, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ–¥–Ω–∏–º –ø—Ä–æ–±–µ–ª–æ–º, –ø—Ä–∏ —ç—Ç–æ–º –Ω–∞–∏–±–æ–ª—å—à–µ–µ —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–≤—ã–º. */

/*  function highAndLow(str: string): void{

let maxNumber: number = 0;
let minNumber: number = 0;
let str1: number[] = str.split('').map(Number);

for( let i = maxNumber; i <= str1.length -1; i++){
    let c = Number(str1[i]);
    if (maxNumber < c){
        maxNumber = c;
    }
    if(minNumber > c){
        minNumber = c;
        }
    }
const result = `${minNumber} ${maxNumber}`;
console.log(result);
} 

console.log(highAndLow("1 2 3 -4 5")); */

let highAndLow: string = "1 2 3 -4 5";
let b: number[] = highAndLow.split(' ').map(Number);
let max: number = 0;
let min: number = 0;
for (let i = max; i <= b.length - 1; i++) {

  let c = Number(b[i]);

  if (max < c) {
    max = c;
  }
  if (min > c) {
    min = c;
  }
}

console.log(`"return ${max.toString()} ${min.toString()}"`);

//Task 3  –ò–∑–æ–≥—Ä–∞–º–º—ã
/* + –ò–∑–æ–≥—Ä–∞–º–º–∞ - —ç—Ç–æ —Å–ª–æ–≤–æ, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –±—É–∫–≤, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–ª–∏ –Ω–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö. –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –∏–∑–æ–≥—Ä–∞–º–º–æ–π. –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–≥—Ä–∞–º–º–æ–π. –†–µ–≥–∏—Å—Ç—Ä –±—É–∫–≤ –º—ã –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.
```javascript
    isIsogram("Dermatoglyphics") == true
    isIsogram("aba") == false
    isIsogram("moOse") == false // -- ignore letter case */

function isIsogram(word: string): boolean {

  const letters: any = new Set();
  for (let i = 0; i < word.length; i++) {
    const letter = word[i];
    if (letters.has(letter)) {
      return false;
    }
    letters.add(letter);
  }
  return true;
}

console.log(isIsogram('korika'));